AWSTemplateFormatVersion: '2010-09-09'
Description: Weather/food application infrastructure
#Parameters:
#  KeyName:
#    Type: AWS::EC2::KeyPair::KeyName
#    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
#  VpcId:
#    Type: AWS::EC2::VPC::Id
#    Description: Select a VPC that allows instances access to the Internet.
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-eca289fb
    us-east-2:
      AMIID: ami-446f3521
    us-west-1:
      AMIID: ami-9fadf8ff
    us-west-2:
      AMIID: ami-7abc111a
    eu-west-1:
      AMIID: ami-a1491ad2
    eu-central-1:
      AMIID: ami-54f5303b
    ap-northeast-1:
      AMIID: ami-9cd57ffd
    ap-southeast-1:
      AMIID: ami-a900a3ca
    ap-southeast-2:
      AMIID: ami-5781be34
Resources:
  NginxImageRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'weatherfoodcorrelationapp/nginx'
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'

  StaticImageRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'weatherfoodcorrelationapp/static'
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'

  ApiImageRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 'weatherfoodcorrelationapp/api'
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: WeatherFoodDemandCorrelationCluster

  NginxTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: NginxTask
          Memory: '128'
          Image: !Join ["", [!Ref "AWS::AccountId", ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", !Ref NginxImageRepository, ":latest"]]
          PortMappings:
            - ContainerPort: 80

  StaticTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: StaticTask
          Memory: '128'
          Image: !Join ["", [!Ref "AWS::AccountId", ".dkr.ecr.", !Ref "AWS::Region", ".amazonaws.com/", !Ref StaticImageRepository, ":latest"]]
          PortMappings:
            - ContainerPort: 3000

#  ApiTask:
#    Type: 'AWS::ECS::TaskDefinition'
#    Properties:
#      Volumes:
#        - Volume Definition
#      Family: String
#      NetworkMode: String
#      PlacementConstraints:
#       - TaskDefinitionPlacementConstraint
#      TaskRoleArn: String
#      ContainerDefinitions:
#        - Container Definition

#  service:
#    Type: AWS::ECS::Service
#    DependsOn: ALBListener
#    Properties:
#      Cluster: !Ref 'ECSCluster'
#      DesiredCount: '1'
#      LoadBalancers:
#      - ContainerName: simple-app
#        ContainerPort: '80'
#        TargetGroupArn: !Ref 'ECSTG'
#      Role: !Ref 'ECSServiceRole'
#      TaskDefinition: !Ref 'taskdefinition'

#  EcsSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupName: WeatherFoodCorrelationApp
#      GroupDescription: ECS Security Group
#      SecurityGroupIngress:
#        - !Ref EcsSecurityGroupHTTPInbound
#        - !Ref EcsSecurityGroupHTTPSInbound
#      Tags:
#        - Resource Tag
#      VpcId: String

#  EcsSecurityGroupHTTPInbound:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref 'EcsSecurityGroup'
#      IpProtocol: tcp
#      FromPort: '80'
#      ToPort: '80'
#      CidrIp: 0.0.0.0/0

#  EcsSecurityGroupHTTPSInbound:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref 'EcsSecurityGroup'
#      IpProtocol: tcp
#      FromPort: '443'
#      ToPort: '443'
#      CidrIp: 0.0.0.0/0

#  EcsSecurityGroupSSHInbound:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref 'EcsSecurityGroup'
#      IpProtocol: tcp
#      FromPort: '22'
#      ToPort: '22'
#      CidrIp: 0.0.0.0/0

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

#  ECSALB:
#    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
#    Properties:
#      Name: ECSALB
#      Scheme: internet-facing
#      LoadBalancerAttributes:
#      - Key: idle_timeout.timeout_seconds
#        Value: '30'
#      SecurityGroups: [!Ref 'EcsSecurityGroup']
